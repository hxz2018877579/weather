import streamlit as st
import datetime
from typing import List, Dict, Any
import base64
import streamlit.components.v1 as components
from templates_data import WEATHER_TEMPLATES
from corrector import correct_text
from town_data import TOWNS
from templates import RAIN_STORM_TEMPLATES
import json
import plotly.express as px
import plotly.graph_objects as go
from streamlit_plotly_events import plotly_events
# ==============================================================================
# 1. MOCK DATA (模拟外部导入数据)
# 注：在实际应用中，以下数据通常从tk_weather.py或其他配置文件中导入。
# ==============================================================================
# 气象灾害类别及其对应的预警等级字典
MOCK_TOWNS = [
    {"name": "平乐镇"}, {"name": "二塘镇"}, {"name": "沙子镇"}, 
    {"name": "源头镇"}, {"name": "同安镇"}, {"name": "张家镇"}, 
    {"name": "阳安乡"}, {"name": "桥亭乡"}, {"name": "青龙乡"}, 
    {"name": "大发瑶族乡"}
]

WEATHER_LEVELS = {
    "雷电": ["黄色", "橙色", "红色"],
    "雷雨大风": ["黄色", "橙色", "红色"],
    "大风": ["蓝色", "黄色", "橙色", "红色"],
    "寒潮": ["蓝色", "黄色", "橙色"],
    "高温": ["黄色", "橙色", "红色"],
    "冰雹": ["橙色", "红色"],
    "道路结冰": ["黄色", "橙色", "红色"],
    "霜冻": ["蓝色", "黄色", "橙色"],
    "大雾": ["黄色", "橙色", "红色"],
    "干旱": ["橙色", "红色"],
    "台风": ["蓝色", "黄色", "橙色", "红色"],
    "暴雪": ["蓝色", "黄色", "橙色", "红色"],
    "霾": ["黄色", "橙色"]
}

# 模拟 TOWNS 数据结构

TOWN_NAMES = sorted([data["name"] for data in MOCK_TOWNS])

# **重要：请将 plxian.png 的 Base64 编码结果替换下面的占位符。**
# **此变量应包含完整的 Base64 字符串（不包含 "data:image/png;base64," 前缀）。**
IMAGE_BASE64_PLACEHOLDER =""

IMAGE_BASE64 = IMAGE_BASE64_PLACEHOLDER 


# ==============================================================================
# 3. NAVIGATION CALLBACKS (页面跳转回调)
# ==============================================================================

def go_to_main_page():
    """将页面状态设置为 'main_page'。"""
    st.session_state.page = 'main_page'

def go_to_second_page():
    """将页面状态设置为 'second_page' (行政区划图选择)。"""
    st.session_state.page = 'second_page'

def go_to_third_page():
    """将页面状态设置为 'third_page' (暴雨短信工具)。"""
    st.session_state.page = 'third_page'
    
# ==============================================================================
# 4. STATE MANAGEMENT (状态初始化与回调)
# ==============================================================================

def initialize_session_state():
    """初始化 Streamlit Session State - 增强版本"""
    now = datetime.datetime.now()
    
    # 基础页面状态
    if 'page' not in st.session_state: 
        st.session_state.page = 'main_page'
    
# === 关键修改：使用更严格的时间状态检查 ===
    # 只在第一次运行时初始化时间
    if 'initialized' not in st.session_state:
        st.session_state.initialized = True
        
        # 日期时间选择状态
        st.session_state.sel_year = now.year
        st.session_state.sel_month = now.month
        st.session_state.sel_day = now.day
        st.session_state.sel_hour = now.hour
        st.session_state.sel_minute = now.minute
        
        # 更新格式化时间
        update_datetime_state()
    
    # 确保时间状态始终存在
    if 'sel_year' not in st.session_state:
        st.session_state.sel_year = now.year
    if 'sel_month' not in st.session_state:
        st.session_state.sel_month = now.month
    if 'sel_day' not in st.session_state:
        st.session_state.sel_day = now.day
    if 'sel_hour' not in st.session_state:
        st.session_state.sel_hour = now.hour
    if 'sel_minute' not in st.session_state:
        st.session_state.sel_minute = now.minute
    
    # 确保格式化时间存在
    if 'selected_date' not in st.session_state or 'selected_time' not in st.session_state:
        update_datetime_state()

    # Page 2 - 乡镇选择状态
    if 'selected_towns' not in st.session_state:
        st.session_state.selected_towns = ["平乐镇"]
    
    # Page 1 - 预警生成状态（关键修复）
    if 'p1_weather_type' not in st.session_state:
        st.session_state.p1_weather_type = list(WEATHER_LEVELS.keys())[0]
    
    # 确保p1_generated_content存在且不为空
    if 'p1_generated_content' not in st.session_state:
        st.session_state.p1_generated_content = ""
    
    # 确保其他Page 1相关状态存在
    if 'p1_weather_level' not in st.session_state:
        p1_levels = get_p1_levels()
        st.session_state.p1_weather_level = p1_levels[0] if p1_levels else ""
    
    if 'p1_template_type' not in st.session_state:
        p1_template_types = get_p1_template_types(
            st.session_state.p1_weather_type, 
            st.session_state.p1_weather_level
        )
        st.session_state.p1_template_type = p1_template_types[0] if p1_template_types else ""
    
    # Page 3 - 暴雨短信状态
    if 'p3_generated_text' not in st.session_state:
        st.session_state.p3_generated_text = "点击上方按钮生成暴雨预警短信。"
    
    if 'p3_level' not in st.session_state:
        st.session_state.p3_level = "黄色"
    
    if 'p3_template_type' not in st.session_state:
        st.session_state.p3_template_type = "继续发布"
    
    if 'p3_sms_type' not in st.session_state:
        st.session_state.p3_sms_type = "短短信"

def update_datetime_state():
    """读取 session_state 中最新的日期时间选择并更新共享状态"""
    # 确保必要的状态存在
    if 'sel_year' not in st.session_state:
        now = datetime.datetime.now()
        st.session_state.sel_year = now.year
        st.session_state.sel_month = now.month
        st.session_state.sel_day = now.day
        st.session_state.sel_hour = now.hour
        st.session_state.sel_minute = now.minute
    
    """只读取 session_state 中的时间值并格式化为字符串，不重置时间"""
    # 安全获取时间值，如果不存在则使用当前时间（但这种情况不应该发生）
    # 安全获取时间值
    y = st.session_state.get('sel_year', datetime.datetime.now().year)
    m = st.session_state.get('sel_month', datetime.datetime.now().month)
    d = st.session_state.get('sel_day', datetime.datetime.now().day)
    h = st.session_state.get('sel_hour', datetime.datetime.now().hour)
    mn = st.session_state.get('sel_minute', datetime.datetime.now().minute)
    
    # 此函数仅更新格式化后的时间字符串
    st.session_state.selected_date = f"{y}年{m:02d}月{d:02d}日"
    st.session_state.selected_time = f"{h:02d}时{mn:02d}分"

def select_all_towns():
    """将所有乡镇设置为选中状态 (用于解决同步问题)"""
    st.session_state.selected_towns = TOWN_NAMES.copy()

def deselect_all_towns():
    """将所有乡镇设置为取消状态"""
    st.session_state.selected_towns = []


# ==============================================================================
# 5. CORE LOGIC (核心功能函数) - 保持不变
# ==============================================================================

def get_p1_levels() -> List[str]:
    """根据灾害类别获取预警等级选项"""
    return WEATHER_LEVELS.get(st.session_state.p1_weather_type, [])

def get_p1_template_types(weather_type: str, weather_level: str) -> List[str]:
    """根据灾害类别和等级获取预警用语类型选项"""
    return list(WEATHER_TEMPLATES.get(weather_type, {}).get(weather_level, {}).keys())

def generate_weather_content():
    """生成 Page 1 的预警内容 - 增强错误处理"""
    try:
        # 确保必要的状态存在
        if any(key not in st.session_state for key in ['sel_day', 'sel_hour', 'sel_minute']):
            st.error("时间参数未初始化，请检查日期时间选择。")
            return
        
        day = st.session_state.sel_day
        hour = st.session_state.sel_hour
        minute = st.session_state.sel_minute
        
        selected_type = st.session_state.p1_weather_type
        selected_level = st.session_state.p1_weather_level
        selected_template_type = st.session_state.p1_template_type

        # 安全检查模板是否存在
        template = WEATHER_TEMPLATES.get(selected_type, {}).get(selected_level, {}).get(selected_template_type)

        if template:
            final_content = template.format(day=day, hour=hour, minute=minute)
            st.session_state.p1_generated_content = final_content
            st.success("预警内容生成成功！")
        else:
            st.session_state.p1_generated_content = (
                f"⚠️ 找不到对应的预警模板\n"
                f"灾害类型: {selected_type}\n"
                f"预警等级: {selected_level}\n"
                f"用语类型: {selected_template_type}\n"
                f"请检查模板配置。"
            )
    except Exception as e:
        st.session_state.p1_generated_content = f"❌ 生成内容失败: {str(e)}"


def generate_message(level: str, template_type: str, sms_type: str, towns: List[str], date: str, time: str, extra_data: Dict[str, Any]) -> str:
    """生成暴雨预警短信 (根据模板正确替换占位符)"""
    try:
        # 从传入的日期和时间字符串提取所需部分
        # 日期格式示例: "2024年08月21日" -> 提取"21日"
        # 时间格式示例: "22时02分" -> 直接使用
        day_part = date.split('日')[0].split('月')[-1] + "日"  # 提取"21日"
        time_display = time  # "22时02分"
        short_time_format = time_display  # 对于短短信使用相同格式
        
        # 处理预警升级/降级类型
        real_template_type = template_type
        is_level_change = False
        
        if template_type == "预警升级":
            real_template_type = "升级"
            is_level_change = True
        elif template_type == "预警降级":
            real_template_type = "降级"
            is_level_change = True
        
        # 修改模板查找逻辑
        if is_level_change:
            # 对于升级/降级，第一层键是real_template_type ("升级"或"降级")
            templates_by_level = RAIN_STORM_TEMPLATES.get(real_template_type, {})
            template_struct = templates_by_level.get(level, {})
        else:
            # 常规类型（提前、过程等）
            level_key = level.split("升")[0] if "升" in level else level.split("降")[0] if "降" in level else level
            templates_by_level = RAIN_STORM_TEMPLATES.get(level_key, {})
            template_struct = templates_by_level.get(real_template_type, {})
        
        if not template_struct:
            return f"错误：RAIN_STORM_TEMPLATES 缺少 '{real_template_type}' 的模板定义或等级'{level_key}'定义。"

        if sms_type == "长短信":
            template = template_struct.get("长短信")
        elif sms_type == "短短信":
            template = template_struct.get("短短信")
        
        if not template:
            return f"错误：短信模板不存在：等级'{level_key}'，类型'{real_template_type}'，短信类型'{sms_type}'"

        towns_str = "、".join(towns)
        final_message = ""
        
        if sms_type == "短短信":
            message_body = template
            
            # 基础替换 - 使用从参数提取的时间值
            message_body = message_body.replace("X县", "平乐县")
            message_body = message_body.replace("X日", day_part)  # 替换为"21日"
            message_body = message_body.replace("X时X分", short_time_format)  # 替换为"22时02分"
            message_body = message_body.replace("{辖区区域}", towns_str)
            
            # 特殊占位符处理 - 根据模板中的实际占位符
            if "X小时" in message_body:
                message_body = message_body.replace("X小时", str(extra_data.get("短短信时间", "")) + "小时")
            if "X小时内" in message_body:
                message_body = message_body.replace("X小时内", str(extra_data.get("短短信时间", "")) + "小时内")
            if "{XX}" in message_body:
                message_body = message_body.replace("{XX}", extra_data.get("影响区域", ""))
            
            final_message = message_body

        elif sms_type == "长短信":
            # 获取模板主体
            message_body = template.get("主体", "")
            
            # 替换基础占位符 - 使用从参数提取的时间值
            message_body = message_body.replace("X县", "平乐县")
            message_body = message_body.replace("X日", day_part)  # "21日"
            message_body = message_body.replace("X时X分", time_display)  # "22时02分"
            
            if real_template_type == "解除":
                # 解除预警的特殊处理 - 根据模板中的实际占位符
                message_body = message_body.replace("{预警级别}", level_key)
                for key in ["云团状态", "影响状态", "过去时长", "实际影响区域", "降雨范围", "局地降雨范围", "最大降雨区域", "最大降雨量"]:
                    message_body = message_body.replace(f"{{{key}}}", str(extra_data.get(key, "")))
            else:
                # 常规长短信处理 - 根据模板中的实际占位符
                message_body = message_body.replace("{辖区区域}", towns_str)
                
                # 替换特定占位符 - 根据模板中的实际占位符
                message_body = message_body.replace("X1", str(extra_data.get("过去时长", "")))
                message_body = message_body.replace("Y1", str(extra_data.get("已出现降雨", "")))
                message_body = message_body.replace("Y2", str(extra_data.get("未来降雨", "")))
                message_body = message_body.replace("XX", str(extra_data.get("未来时长", "")))
                message_body = message_body.replace("XYX", str(extra_data.get("降雨量", "")))
                
                # 替换动态信息
                message_body = message_body.replace("{伴随天气}", extra_data.get("伴随天气", ""))
                message_body = message_body.replace("{移向}", extra_data.get("移向", ""))
                message_body = message_body.replace("{强度变化趋势}", extra_data.get("强度变化趋势", ""))
            
            final_message = message_body
            
            # 添加升级提示（如果存在且需要）
            upgrade_prompt = template.get("升级提示", "")
            if upgrade_prompt and extra_data.get("升级提示", False):
                # 处理升级提示中的占位符说明
                upgrade_prompt = upgrade_prompt.replace("后期升级预警信号的可能性较大，", "")
                upgrade_prompt = upgrade_prompt.replace("后期升级预警信号的可能性较大", "")
                upgrade_prompt = upgrade_prompt.replace("（如果考虑降雨加强，后续可能会升级为暴雨橙色预警，则加上\"后期升级预警信号的可能性较大\"）", "")
                upgrade_prompt = upgrade_prompt.replace("（如果考虑降雨加强，后续可能会升级为暴雨红色预警，则加上\"后期升级预警信号的可能性较大\"）", "")
                final_message += upgrade_prompt
            
            # 添加风险提示（如果存在）
            risk_type = extra_data.get("风险类型", "")
            if risk_type and "风险提示" in template:
                risk_text = template["风险提示"].get(risk_type, "")
                if risk_text:
                    final_message += risk_text
            
            # 添加结尾
            ending = template.get("结尾", "")
            if ending:
                final_message += ending

        return final_message

    except Exception as e:
        return f"生成短信时发生错误：{e}"
def update_p3_content():
    """从 session_state 收集数据并生成暴雨短信 (Page 3 回调)"""
    try:
        # 确保暴雨短信相关状态存在
        if 'p3_level' not in st.session_state:
            st.session_state.p3_level = "黄色"
        if 'p3_template_type' not in st.session_state:
            st.session_state.p3_template_type = "继续发布"
        if 'p3_sms_type' not in st.session_state:
            st.session_state.p3_sms_type = "短短信"
        
        # 确保乡镇选择状态存在
        if 'selected_towns' not in st.session_state:
            st.session_state.selected_towns = ["平乐镇"]
        
        # 获取第三页独立设置的时间
        p3_selected_date = f"{st.session_state.p3_sel_year}年{st.session_state.p3_sel_month:02d}月{st.session_state.p3_sel_day:02d}日"
        p3_selected_time = f"{st.session_state.p3_sel_hour:02d}时{st.session_state.p3_sel_minute:02d}分"
        
        # 收集额外数据
        extra_data_keys = [
            "过去时长", "已出现降雨", "未来时长", "降雨量", "未来降雨", "短短信时间",
            "伴随天气", "移向", "强度变化趋势", "风险类型", "升级提示", "云团状态",
            "影响状态", "实际影响区域", "降雨范围", "局地降雨范围", "最大降雨区域", "最大降雨量"
        ]
        current_extra_data = {}
        for key in extra_data_keys:
            state_key = f'p3_extra_data_{key}'
            current_extra_data[key] = st.session_state.get(state_key, "")
        
        # 生成短信
        generated_text = generate_message(
            st.session_state.p3_level, 
            st.session_state.p3_template_type, 
            st.session_state.p3_sms_type, 
            st.session_state.selected_towns, 
            p3_selected_date,  # 使用第三页独立设置的时间
            p3_selected_time,  # 使用第三页独立设置的时间
            current_extra_data
        )
        st.session_state.p3_generated_text = generated_text
    
    except Exception as e:
        st.session_state.p3_generated_text = f"生成短信时发生错误：{e}"
# ==============================================================================
# 6. STREAMLIT PAGES (页面函数)
# ==============================================================================

def create_main_page():
    st.title("🌧️ 气象预警发布系统 (主页)")
    
    # --- 发布时间选择 ---
    st.markdown("#### 发布时间选择")

    now = datetime.datetime.now()
        # 状态安全检查
    required_states = [
        'p1_generated_content', 'p1_weather_type', 
        'p1_weather_level', 'p1_template_type'
    ]
    
    for state in required_states:
        if state not in st.session_state:
            # 如果缺少关键状态，重新初始化
            initialize_session_state()
            st.rerun()  # 重新运行以确保状态正确加载
            return  # 立即返回，等待重新运行
    col_y, col_m, col_d, col_h, col_mn = st.columns(5)
    
    with col_y:
        st.selectbox("年份", options=list(range(now.year, now.year + 6)), index=0, key='sel_year', on_change=update_datetime_state)
    with col_m:
        st.selectbox("月份", options=list(range(1, 13)), format_func=lambda x: f"{x:02d}", index=now.month-1, key='sel_month', on_change=update_datetime_state)
    with col_d:
        default_day_index = now.day - 1 if 1 <= now.day <= 31 else 0
        st.selectbox("日期", options=list(range(1, 32)), format_func=lambda x: f"{x:02d}", index=default_day_index, key='sel_day', on_change=update_datetime_state)
    with col_h:
        st.selectbox("小时", options=list(range(0, 24)), format_func=lambda x: f"{x:02d}", index=now.hour, key='sel_hour', on_change=update_datetime_state)
    with col_mn:
        st.selectbox("分钟", options=list(range(0, 60)), format_func=lambda x: f"{x:02d}", index=now.minute, key='sel_minute', on_change=update_datetime_state)


    st.divider()

    # --- 气象灾害预警信号选择 ---
    st.markdown("#### 气象灾害预警信号选择")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.selectbox(
            "灾害类别:", 
            options=list(WEATHER_LEVELS.keys()), 
            key='p1_weather_type',
        )

    p1_levels = get_p1_levels()
    if 'p1_weather_level' not in st.session_state or st.session_state.p1_weather_level not in p1_levels:
        st.session_state.p1_weather_level = p1_levels[0] if p1_levels else ""

    with col2:
        st.selectbox(
            "预警等级:", 
            options=p1_levels,
            key='p1_weather_level',
        )

    p1_template_types = get_p1_template_types(st.session_state.p1_weather_type, st.session_state.p1_weather_level)
    if 'p1_template_type' not in st.session_state or st.session_state.p1_template_type not in p1_template_types:
        st.session_state.p1_template_type = p1_template_types[0] if p1_template_types else ""

    with col3:
        st.selectbox(
            "预警用语类型:",
            options=p1_template_types,
            key='p1_template_type',
        )

    # --- 预警内容生成与预览 ---
    st.markdown("#### 预警内容生成与预览")
    st.button("生成预警内容", on_click=generate_weather_content, type="primary", key="generate_p1_btn")

    st.code(
        st.session_state.p1_generated_content, 
        language='text'  
    )
    st.caption("提示：上方预警内容区域右上方有复制按钮，点击即可复制。")

    # --- 业务人员内容纠错 ---
    st.markdown("#### 业务人员内容纠错")
    
    default_correction_text = st.session_state.get('p1_generated_content', '平乐县气象台发布了雷电黄色预警，的得注意防范。')
    input_text = st.text_area("输入待纠错文本", value=default_correction_text, height=150, key='p1_correction_input')
    
    corrected_output_placeholder = st.empty()

    if st.button("执行纠错", key="run_correction"):
        corrected_result = correct_text(input_text)
        corrected_output_placeholder.text_area("纠错结果", corrected_result, height=150)
    else:
        corrected_output_placeholder.text_area("纠错结果", "点击下方按钮执行纠错。", height=150)

    st.divider()

    # --- 页面导航 ---
    col_nav1, col_nav2 = st.columns(2)
    with col_nav1:
        st.button("查看行政区划图 (选择乡镇)", on_click=go_to_second_page, use_container_width=True) 
    with col_nav2:
        st.button("更多功能 (暴雨短信工具)", on_click=go_to_third_page, use_container_width=True)

def create_second_page():
    st.title("📍 平乐县行政区划图 (乡镇选择)")
    
    st.markdown("### 🗺️ 交互式地图选择")
    st.info("点击地图上的乡镇散点进行选择（红色=已选中，蓝色=未选中）")
    
    # 修正后的乡镇坐标
    town_coordinates = {
        "平乐镇": {"x": 200, "y": 550},
        "二塘镇": {"x": 380, "y": 600},
        "沙子镇": {"x": 300, "y": 765},
        "源头镇": {"x": 600, "y": 200},
        "同安镇": {"x": 520, "y": 470},
        "张家镇": {"x": 480, "y": 500},
        "阳安乡": {"x": 470, "y": 280},
        "桥亭乡": {"x": 370, "y": 330},
        "青龙乡": {"x": 420, "y": 310},
        "大发瑶族乡": {"x": 250, "y": 430}
    }
    
    # 创建Plotly图表
    fig = go.Figure()
    
    # 添加地图背景
    fig.add_layout_image(
        dict(
            source=f"data:image/png;base64,{IMAGE_BASE64}",
            xref="x", yref="y",
            x=0, y=1000,
            sizex=800, sizey=1000,
            sizing="stretch",
            opacity=1.0,
            layer="below"
        )
    )
    
    # 添加乡镇散点
    for town in TOWN_NAMES:
        coords = town_coordinates[town]
        is_selected = town in st.session_state.selected_towns
        
        fig.add_trace(go.Scatter(
            x=[coords["x"]], 
            y=[coords["y"]],
            mode="markers+text",
            marker=dict(
                size=25,
                color="red" if is_selected else "blue",
                line=dict(width=3, color="white")
            ),
            text=[town],
            textposition="top center",
            name=town,
            customdata=[[town]],
            hovertemplate=f"<b>{town}</b><br>状态: {'已选中' if is_selected else '未选中'}<extra></extra>"
        ))
    
    # 设置图表样式
    fig.update_layout(
        title="平乐县乡镇选择地图",
        xaxis=dict(range=[0, 800], showticklabels=False, showgrid=False, zeroline=False),
        yaxis=dict(range=[0, 1000], showticklabels=False, showgrid=False, zeroline=False),
        width=800,
        height=1000,
        showlegend=False,
        margin=dict(l=0, r=0, t=40, b=0),
        # 关键修改：调整悬停模式
        hovermode="closest",  # 只显示最接近的点
        hoverdistance=5,  # 悬停触发距离（像素）
    )
    
    # 显示地图并处理点击事件
    selected_points = plotly_events(
        fig, 
        click_event=True, 
        override_height=1000,
        key="town_map_interactive"
    )
    
    # 使用session_state跟踪上次点击，避免循环
    last_click_time = st.session_state.get('last_click_time', 0)
    current_time = datetime.datetime.now().timestamp()
    
    if selected_points and (current_time - last_click_time) > 0.5:  # 防抖：0.5秒内只处理一次点击
        st.session_state.last_click_time = current_time
        
        # 处理点击逻辑
        clicked_town = None
        
        # 方法1：使用curveNumber
        if selected_points[0].get('curveNumber') is not None:
            curve_num = selected_points[0]['curveNumber']
            if curve_num < len(TOWN_NAMES):
                clicked_town = TOWN_NAMES[curve_num]
        
        # 方法2：使用pointIndex（备选）
        if not clicked_town and selected_points[0].get('pointIndex') is not None:
            point_idx = selected_points[0]['pointIndex']
            if point_idx < len(TOWN_NAMES):
                clicked_town = TOWN_NAMES[point_idx]
        
        if clicked_town:
            # 切换选择状态
            new_selected_towns = st.session_state.selected_towns.copy()
            
            if clicked_town in new_selected_towns:
                new_selected_towns.remove(clicked_town)
            else:
                new_selected_towns.append(clicked_town)
            
            # 只有当状态确实改变时才更新
            if set(new_selected_towns) != set(st.session_state.selected_towns):
                st.session_state.selected_towns = new_selected_towns
                st.session_state.last_click_town = clicked_town
                st.rerun()
    
    # 显示选择结果 - 移除操作按钮和调试选项
    st.markdown("---")
    st.subheader("✅ 已确认选中乡镇")
    
    if st.session_state.selected_towns:
        st.success(f"✅ 已选中 {len(st.session_state.selected_towns)} 个乡镇")
        for town in st.session_state.selected_towns:
            st.write(f"- {town}")
    else:
        st.info("ℹ️ 当前未选择任何乡镇")
    
    # 页面导航按钮
    st.divider()
    # 创建并排的两列来放置按钮
    col_nav_1, col_nav_2 = st.columns(2)

    with col_nav_1:
        st.button("返回主页", on_click=go_to_main_page, use_container_width=True, type="secondary")

    with col_nav_2:
        st.button("暴雨短信工具", on_click=go_to_third_page, use_container_width=True)
def create_third_page():
    st.title("💬 暴雨预警短信生成工具 (更多功能)")
    
    # --- 独立时间设置区域 ---
    st.markdown("#### 发布时间设置")
    now = datetime.datetime.now()
    
    col_y, col_m, col_d, col_h, col_mn = st.columns(5)
    
    # 初始化第三页独立的时间状态
    if 'p3_sel_year' not in st.session_state:
        st.session_state.p3_sel_year = now.year
    if 'p3_sel_month' not in st.session_state:
        st.session_state.p3_sel_month = now.month
    if 'p3_sel_day' not in st.session_state:
        st.session_state.p3_sel_day = now.day
    if 'p3_sel_hour' not in st.session_state:
        st.session_state.p3_sel_hour = now.hour
    if 'p3_sel_minute' not in st.session_state:
        st.session_state.p3_sel_minute = now.minute
    
    with col_y:
        st.selectbox("年份", options=list(range(now.year, now.year + 6)), index=0, key='p3_sel_year')
    with col_m:
        st.selectbox("月份", options=list(range(1, 13)), format_func=lambda x: f"{x:02d}", 
                    index=now.month-1, key='p3_sel_month')
    with col_d:
        default_day_index = now.day - 1 if 1 <= now.day <= 31 else 0
        st.selectbox("日期", options=list(range(1, 32)), format_func=lambda x: f"{x:02d}", 
                    index=default_day_index, key='p3_sel_day')
    with col_h:
        st.selectbox("小时", options=list(range(0, 24)), format_func=lambda x: f"{x:02d}", 
                    index=now.hour, key='p3_sel_hour')
    with col_mn:
        st.selectbox("分钟", options=list(range(0, 60)), format_func=lambda x: f"{x:02d}", 
                    index=now.minute, key='p3_sel_minute')
    
    # 格式化显示时间
    p3_selected_date = f"{st.session_state.p3_sel_year}年{st.session_state.p3_sel_month:02d}月{st.session_state.p3_sel_day:02d}日"
    p3_selected_time = f"{st.session_state.p3_sel_hour:02d}时{st.session_state.p3_sel_minute:02d}分"
  
    
    st.divider()

    # --- 输入选择区域 ---
    st.markdown("#### 预警信号与短信类型选择")
    
    col_p3_1, col_p3_2, col_p3_3 = st.columns(3)

    template_type_options = ["提前", "过程", "实况", "实况趋减", "继续发布", "解除", "预警升级", "预警降级"]
    with col_p3_2:
        p3_template_type = st.selectbox("预警类型:", options=template_type_options, 
                                       index=template_type_options.index("继续发布"), 
                                       key='p3_template_type')

    # 根据预警类型动态更新等级选项
    if p3_template_type == "预警升级":
        level_options = ["黄升橙色", "黄升红色", "橙升红色"]
    elif p3_template_type == "预警降级":
        level_options = ["橙降黄色", "红降黄色", "红降橙色"]
    else:
        level_options = ["黄色", "橙色", "红色"]
        
    if 'p3_level' not in st.session_state or st.session_state.p3_level not in level_options:
        st.session_state.p3_level = level_options[0]

    with col_p3_1:
        st.selectbox("预警等级:", options=level_options, key='p3_level')

    sms_type_options = ["短短信", "长短信"]
    with col_p3_3:
        st.selectbox("短信类型:", options=sms_type_options, index=0, key='p3_sms_type')

    # --- 额外信息 (Extra Data) ---
    st.markdown("---")
    st.markdown("#### 额外信息输入")
    
    # 初始化额外数据
    extra_data_keys = [
        "过去时长", "已出现降雨", "未来时长", "降雨量", "未来降雨", "短短信时间",
        "伴随天气", "移向", "强度变化趋势", "风险类型", "升级提示", "云团状态",
        "影响状态", "实际影响区域", "降雨范围", "局地降雨范围", "最大降雨区域", "最大降雨量"
    ]
    
    for key in extra_data_keys:
        state_key = f'p3_extra_data_{key}'
        if state_key not in st.session_state:
            if key == "升级提示":
                st.session_state[state_key] = True 
            else:
                st.session_state[state_key] = ""

    # 风险类型选项
    risk_type_options = ["", "县城积涝", "山洪地质灾害"] 
    if 'p3_extra_data_风险类型' not in st.session_state or st.session_state.p3_extra_data_风险类型 not in risk_type_options:
        st.session_state.p3_extra_data_风险类型 = risk_type_options[1]
    
    with st.expander("常规参数与风险提示", expanded=True):
        col_r1, col_r2, col_r3 = st.columns(3)
        
        with col_r1:
            st.text_input("过去时长(X1):", value="1", key='p3_extra_data_过去时长', 
                         help="对应模板中的 X1")
            st.text_input("已出现降雨(Y1):", value="20", key='p3_extra_data_已出现降雨',
                         help="对应模板中的 Y1")
            st.text_input("降雨量(XYX):", value="50", key='p3_extra_data_降雨量',
                         help="对应模板中的 XYX")
            
        with col_r2:
            st.text_input("未来时长(XX):", value="3", key='p3_extra_data_未来时长',
                         help="对应模板中的 XX")
            st.text_input("未来降雨(Y2):", value="20", key='p3_extra_data_未来降雨',
                         help="对应模板中的 Y2")
            st.text_input("短短信时间(X小时):", value="3", key='p3_extra_data_短短信时间',
                         help="对应模板中的 X小时/X小时内")
            
        with col_r3:
            st.text_input("伴随天气:", value="雷电、短时大风", key='p3_extra_data_伴随天气',
                         help="对应模板中的 {伴随天气}")
            st.text_input("云团移向:", value="缓慢东移", key='p3_extra_data_移向',
                         help="对应模板中的 {移向}")
            st.text_input("强度变化趋势:", value="维持", key='p3_extra_data_强度变化趋势',
                         help="对应模板中的 {强度变化趋势}")
            st.selectbox("风险类型:", options=risk_type_options, key='p3_extra_data_风险类型')
            st.checkbox("包含升级提示", key='p3_extra_data_升级提示',
                       help="是否添加模板中的升级提示内容")

    # 仅在解除预警时显示特殊参数
    if st.session_state.p3_template_type == "解除":
        with st.expander("解除预警参数", expanded=True):
            col_c1, col_c2 = st.columns(2)
            
            cloud_state_options = ["强降雨云团已远离", "强降雨云团已明显减弱"]
            impact_state_options = ["结束", "减弱"]

            with col_c1:
                if 'p3_extra_data_云团状态' not in st.session_state or st.session_state.p3_extra_data_云团状态 not in cloud_state_options:
                    st.session_state.p3_extra_data_云团状态 = cloud_state_options[0]
                st.selectbox("云团状态:", options=cloud_state_options, key='p3_extra_data_云团状态')
                st.text_input("实际影响区域:", value="我县北部的沙子镇、二塘镇等乡镇", key='p3_extra_data_实际影响区域')
                st.text_input("最大降雨区域:", value="二塘镇鸟梨峡水库", key='p3_extra_data_最大降雨区域')
            
            with col_c2:
                if 'p3_extra_data_影响状态' not in st.session_state or st.session_state.p3_extra_data_影响状态 not in impact_state_options:
                    st.session_state.p3_extra_data_影响状态 = impact_state_options[0]
                st.selectbox("影响状态:", options=impact_state_options, key='p3_extra_data_影响状态')
                st.text_input("降雨范围:", value="120-130", key='p3_extra_data_降雨范围')
                st.text_input("最大降雨量:", value="128.5", key='p3_extra_data_最大降雨量')

    # --- 生成按钮和输出 ---
    st.divider()
    
    st.button("生成暴雨短信", on_click=update_p3_content, type="primary")

    st.text_area("生成结果", st.session_state.p3_generated_text, height=250)

    st.divider()
    st.button("返回主页", on_click=go_to_main_page, type="secondary")

# ==============================================================================
# 7. MAIN APP ENTRY POINT (主程序入口)
# ==============================================================================

def app():
    """主应用函数 - 增强初始化"""
    st.set_page_config(layout="wide", page_title="气象预警发布系统")
    
    # 强制初始化状态
    initialize_session_state()
    
    # 调试信息（可选）
    if st.session_state.get('debug_mode', False):
        st.sidebar.write("当前状态键:", list(st.session_state.keys()))
    
    # 页面路由
    if st.session_state.page == 'main_page':
        create_main_page()
    elif st.session_state.page == 'second_page':
        create_second_page()
    elif st.session_state.page == 'third_page':
        create_third_page()
    
    st.sidebar.markdown("---")
    st.sidebar.caption("版本 1.0.27 (状态初始化优化)")


if __name__ == "__main__":
    app()
